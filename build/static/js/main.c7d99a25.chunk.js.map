{"version":3,"sources":["common-components/Inputs.jsx","api/base.js","common-components/modal/Modal.jsx","App.js","utils/generateDateOptions.js","index.js"],"names":["DropDown","props","className","label","value","onChange","disabled","optionArray","map","val","idx","valueFunc","displayFunc","InputField","placeholder","type","checked","name","axios","create","baseURL","Modal","children","App","dateValue","date","year","getFullYear","month","getMonth","day","getDate","timeString","hrs","mins","amOrPm","dateOpt","Date","toLocaleString","timeZone","date1","setDate","date2","date3","dateOptions","monthNames","useState","cwl","setCwl","password","setPassword","hours","setHours","minutes","setMinutes","amPm","setAmPm","gym","setGym","refresh","setRefresh","loading","setLoading","onSubmit","a","post","username","time","response","alert","data","message","e","target","onClick","SyncOutlined","spin","style","fontSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7d99a25.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const DropDown = (props) => {\n  return (\n    <div className={props.className}>\n      <label className={`${props.className}-label`}>{`${props.label}: `}</label>\n      <select\n        className={`${props.className}-selections`}\n        value={props.value}\n        onChange={props.onChange}\n        disabled={props.disabled}\n      >\n        {props.optionArray.map((val, idx) => {\n          return (\n            <option\n              value={props.valueFunc ? props.valueFunc(val) : val}\n              className={`${props.className}-option`}\n              key={idx}\n            >\n              {props.displayFunc ? props.displayFunc(val) : val}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n};\n\nDropDown.propTypes = {\n  className: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  optionArray: PropTypes.array.isRequired,\n  valueFunc: PropTypes.func,\n  displayFunc: PropTypes.func,\n  value: PropTypes.any,\n  disabled: PropTypes.bool,\n};\n\nexport const InputField = (props) => {\n  return (\n    <div className={props.className}>\n      <label className={`${props.className}-label`}>{`${props.label}: `}</label>\n      <input\n        className={`${props.className}-input`}\n        value={props.value}\n        placeholder={props.placeholder}\n        onChange={props.onChange}\n        type={props.type}\n        checked={props.checked}\n        disabled={props.disabled}\n      >\n        {props.name}\n      </input>\n    </div>\n  );\n};\n\nInputField.propTypes = {\n  className: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  value: PropTypes.any,\n  type: PropTypes.string,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  name: PropTypes.string,\n};\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"/\",\n});\n","import React from \"react\";\nimport \"./Modal.css\";\n\nexport const Modal = ({ children }) => {\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-container-styles\">{children}</div>\n    </div>\n  );\n};\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport { dateOptions } from \"./utils/generateDateOptions\";\nimport { DropDown, InputField } from \"./common-components/Inputs\";\nimport axios from \"./api/base\";\nimport { Modal } from \"./common-components/modal/Modal\";\nimport { SyncOutlined } from \"@ant-design/icons\";\n\nfunction App() {\n  const dateValue = (date) => {\n    let year = `${date.getFullYear()}`;\n    let month = `${date.getMonth() + 1}`;\n    let day = `${date.getDate()}`;\n\n    if (date.getMonth() <= 9) {\n      month = \"0\" + month;\n    }\n    if (date.getDate() <= 9) {\n      day = \"0\" + day;\n    }\n\n    return year + month + day;\n  };\n\n  const dateString = (date) => {\n    return `${date.getDate()} ${\n      monthNames[date.getMonth()]\n    } ${date.getFullYear()}`;\n  };\n\n  const timeString = (hrs, mins, amOrPm) => {\n    return `${hrs}:${mins} ${amOrPm}`;\n  };\n\n  const gymMaker = (gym) => {\n    if (gym === \"Arc\") {\n      return 0;\n    } else if (gym === \"BirdCoop\") {\n      return 1;\n    }\n\n    return -1;\n  };\n\n  let dateOpt = dateOptions();\n  const amOrPm = [\"am\", \"pm\"];\n  const mins = [\"00\", \"30\"];\n  const hrs = [\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"10\",\n    \"11\",\n    \"12\",\n  ];\n  const gyms = [\"Arc\", \"BirdCoop\"];\n  const monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  const [cwl, setCwl] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [date, setDate] = useState(dateValue(dateOpt[2]));\n  const [hours, setHours] = useState(\"07\");\n  const [minutes, setMinutes] = useState(\"00\");\n  const [amPm, setAmPm] = useState(\"am\");\n  const [gym, setGym] = useState(0);\n  const [refresh, setRefresh] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  const onSubmit = async () => {\n    setLoading(true);\n    try {\n      let response = await axios.post(\"/book\", {\n        username: cwl,\n        password: password,\n        gym: gym,\n        date: date,\n        time: `${timeString(hours, minutes, amPm)}`,\n        refresh: refresh,\n      });\n      alert(response.data);\n    } catch (e) {\n      alert(e.message);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h1>UBC GYM BOOKING APP</h1>\n      </div>\n      <form className=\"form\">\n        <div className=\"text-input\">\n          <InputField\n            className=\"cwl\"\n            label={\"CWL\"}\n            value={cwl}\n            placeholder={\"CWL\"}\n            onChange={(e) => {\n              setCwl(e.target.value);\n            }}\n            type={\"text\"}\n            disabled={loading}\n          />\n        </div>\n        <div className=\"text-input\">\n          <InputField\n            className=\"password\"\n            label={\"Password\"}\n            value={password}\n            placeholder={\"Password\"}\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n            type={\"password\"}\n            disabled={loading}\n          />\n        </div>\n        <div className=\"dropdown-input\">\n          <DropDown\n            className=\"date\"\n            label=\"Date\"\n            value={date}\n            onChange={(e) => {\n              setDate(e.target.value);\n            }}\n            optionArray={dateOpt}\n            displayFunc={dateString}\n            valueFunc={dateValue}\n            disabled={loading}\n          />\n        </div>\n        <div className=\"dropdown-input\">\n          <DropDown\n            className=\"hour\"\n            label=\"Hour\"\n            value={hours}\n            onChange={(e) => {\n              setHours(e.target.value);\n            }}\n            optionArray={hrs}\n            disabled={loading}\n          />\n        </div>\n        <div className=\"dropdown-input\">\n          <DropDown\n            className=\"min\"\n            label=\"Minutes\"\n            value={minutes}\n            onChange={(e) => {\n              setMinutes(e.target.value);\n            }}\n            optionArray={mins}\n            disabled={loading}\n          />\n        </div>\n        <div className=\"dropdown-input\">\n          <DropDown\n            className=\"ampm\"\n            label=\"AM/PM\"\n            value={amPm}\n            onChange={(e) => {\n              setAmPm(e.target.value);\n            }}\n            optionArray={amOrPm}\n            disabled={loading}\n          />\n        </div>\n        <div className=\"dropdown-input\">\n          <DropDown\n            className=\"gym\"\n            label=\"Gym\"\n            value={gym}\n            onChange={(e) => {\n              setGym(e.target.value);\n            }}\n            optionArray={gyms}\n            valueFunc={gymMaker}\n            disabled={loading}\n          />\n        </div>\n        <div className=\"text-input\">\n          <InputField\n            className=\"refresh\"\n            label={\"Refresh\"}\n            placeholder={\"Refresh\"}\n            value={refresh}\n            onChange={(e) => {\n              setRefresh(e.target.checked);\n            }}\n            type={\"checkbox\"}\n            disabled={loading}\n          />\n        </div>\n        <div className=\"submit-button\" onClick={loading ? null : onSubmit}>\n          Book\n        </div>\n      </form>\n      <div className=\"alert\">\n        This website is created to book UBC gym slots. UBC gym sessions get full\n        as soon as they are open for booking. This app will spin up a browser on\n        the server and will try to book your preferred slot. The connection\n        stays alive for about 5 minutes and hence trying to book your slots 5\n        minutes before they go live is ideal. For example, if you are trying to\n        book the 1 pm slot on the 31st of December that is avaiable for booking\n        starting at 6pm on the 29th of December, you can go on this website on\n        the 29th of December and request to book a slot at around 05:55 pm and\n        check the refresh option. The browser that spins up on the server will\n        have your booking open and will refresh right at 6 pm to book your slot\n        for you. Please make sure that there is slot that is or will be\n        available to be booked in about 5mins. Make sure your check your\n        selections and credentials before booking. Errors can occur while\n        booking and there is no gaurantee that your slot will be booked. Use at\n        your own risk!!!\n        <div className=\"note\">\n          Note: A virtual browser needs to be used on the backend at UBC GYM\n          booking system does not have a public API.\n        </div>\n        <div className=\"warning\">\n          Warning: Your CWL passwords are not stored but are logged and can be\n          viewed by the host and the developer of the website. Use at your own\n          risk!!!\n        </div>\n      </div>\n      {loading && (\n        <Modal>\n          Booking in Progress!!!\n          <SyncOutlined\n            className={\"spinner\"}\n            spin={true}\n            style={{ fontSize: \"30px\" }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","export const dateOptions = () => {\n  let date = new Date(\n    new Date().toLocaleString(\"en-US\", { timeZone: \"America/Vancouver\" })\n  );\n\n  let date1 = new Date(date);\n  date1.setDate(date1.getDate() + 1);\n\n  let date2 = new Date(date);\n  date2.setDate(date2.getDate() + 2);\n\n  let date3 = new Date(date);\n  date3.setDate(date3.getDate() + 3);\n\n  return [date, date1, date2, date3];\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}